// Code generated by goa v3.14.5, DO NOT EDIT.
//
// todo HTTP client types
//
// Command:
// $ goa gen goa-sample/design

package client

import (
	todo "goa-sample/gen/todo"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	Title string `form:"title" json:"title" xml:"title"`
}

// CreateResponseBody is the type of the "todo" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID of the todo
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the todo
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Is the todo completed
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "todo" service.
func NewCreateRequestBody(p *todo.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Title: p.Title,
	}
	return body
}

// NewCreateTodoCreated builds a "todo" service "create" endpoint result from a
// HTTP "Created" response.
func NewCreateTodoCreated(body *CreateResponseBody) *todo.Todo {
	v := &todo.Todo{
		ID:        *body.ID,
		Title:     *body.Title,
		Completed: *body.Completed,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("completed", "body"))
	}
	return
}
