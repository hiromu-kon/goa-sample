// Code generated by goa v3.14.5, DO NOT EDIT.
//
// todo HTTP server types
//
// Command:
// $ goa gen goa-sample/design

package server

import (
	todo "goa-sample/gen/todo"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// CreateResponseBody is the type of the "todo" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID of the todo
	ID string `form:"id" json:"id" xml:"id"`
	// Title of the todo
	Title string `form:"title" json:"title" xml:"title"`
	// Is the todo completed
	Completed bool `form:"completed" json:"completed" xml:"completed"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "todo" service.
func NewCreateResponseBody(res *todo.Todo) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:        res.ID,
		Title:     res.Title,
		Completed: res.Completed,
	}
	return body
}

// NewHelloPayload builds a todo service hello endpoint payload.
func NewHelloPayload(name string) *todo.HelloPayload {
	v := &todo.HelloPayload{}
	v.Name = name

	return v
}

// NewCreatePayload builds a todo service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *todo.CreatePayload {
	v := &todo.CreatePayload{
		Title: *body.Title,
	}

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	return
}
